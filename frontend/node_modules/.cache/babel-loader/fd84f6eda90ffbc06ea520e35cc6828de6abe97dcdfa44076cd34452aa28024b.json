{"ast":null,"code":"var _jsxFileName = \"/Users/soshhowell/Apps/inkwell-internal/frontend/src/components/ProjectWhiteboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport './ProjectWhiteboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectWhiteboard = ({\n  selectedProject,\n  onError,\n  onSuccess\n}) => {\n  _s();\n  const [whiteboardContent, setWhiteboardContent] = useState('');\n  const [autoSaving, setAutoSaving] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [lastSavedContent, setLastSavedContent] = useState('');\n  const autoSaveTimeoutRef = useRef(null);\n  const syncTimeoutRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Load whiteboard content when selected project changes\n  useEffect(() => {\n    if (selectedProject) {\n      setWhiteboardContent(selectedProject.whiteboard || '');\n      setLastSavedContent(selectedProject.whiteboard || '');\n      setHasUnsavedChanges(false);\n    } else {\n      setWhiteboardContent('');\n      setLastSavedContent('');\n      setHasUnsavedChanges(false);\n    }\n\n    // Clear timeouts when project changes\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n      autoSaveTimeoutRef.current = null;\n    }\n    if (syncTimeoutRef.current) {\n      clearTimeout(syncTimeoutRef.current);\n      syncTimeoutRef.current = null;\n    }\n  }, [selectedProject]);\n\n  // Auto-save function\n  const triggerAutoSave = useCallback(async content => {\n    if (!selectedProject || content === lastSavedContent) return;\n    setAutoSaving(true);\n    try {\n      await axios.put(`/api/projects/${selectedProject.id}/whiteboard`, {\n        whiteboard: content\n      });\n      setLastSavedContent(content);\n      setHasUnsavedChanges(false);\n      if (onSuccess) {\n        onSuccess('Whiteboard saved');\n      }\n    } catch (error) {\n      console.error('Failed to save whiteboard:', error);\n      if (onError) {\n        var _error$response, _error$response$data;\n        onError('Failed to save whiteboard: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message));\n      }\n    } finally {\n      setAutoSaving(false);\n    }\n  }, [selectedProject, lastSavedContent, onError, onSuccess]);\n\n  // Sync check function (polls for updates from other windows)\n  const checkForUpdates = useCallback(async () => {\n    if (!selectedProject || isTyping) return;\n    try {\n      const response = await axios.get(`/api/projects/${selectedProject.id}`);\n      const serverContent = response.data.whiteboard || '';\n\n      // Only update if content has changed and user hasn't made local changes\n      if (serverContent !== lastSavedContent && !hasUnsavedChanges) {\n        setWhiteboardContent(serverContent);\n        setLastSavedContent(serverContent);\n      }\n    } catch (error) {\n      console.error('Failed to sync whiteboard:', error);\n    }\n  }, [selectedProject, isTyping, hasUnsavedChanges, lastSavedContent]);\n\n  // Handle content change\n  const handleContentChange = e => {\n    const newContent = e.target.value;\n    setWhiteboardContent(newContent);\n    setHasUnsavedChanges(newContent !== lastSavedContent);\n    setIsTyping(true);\n\n    // Clear existing timeouts\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n    }\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Set typing to false after 1 second of inactivity\n    typingTimeoutRef.current = setTimeout(() => {\n      setIsTyping(false);\n    }, 1000);\n\n    // Auto-save after 2 seconds of inactivity\n    autoSaveTimeoutRef.current = setTimeout(() => {\n      triggerAutoSave(newContent);\n    }, 2000);\n  };\n\n  // Set up periodic sync check\n  useEffect(() => {\n    if (!selectedProject) return;\n    const setupSyncInterval = () => {\n      syncTimeoutRef.current = setTimeout(() => {\n        checkForUpdates();\n        setupSyncInterval(); // Schedule next check\n      }, 5000); // Check every 5 seconds\n    };\n    setupSyncInterval();\n    return () => {\n      if (syncTimeoutRef.current) {\n        clearTimeout(syncTimeoutRef.current);\n      }\n    };\n  }, [selectedProject, checkForUpdates]);\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimeoutRef.current) {\n        clearTimeout(autoSaveTimeoutRef.current);\n      }\n      if (syncTimeoutRef.current) {\n        clearTimeout(syncTimeoutRef.current);\n      }\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Get auto-save status text\n  const getAutoSaveStatus = () => {\n    if (autoSaving) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"auto-saving\",\n        children: \"Saving...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 14\n      }, this);\n    }\n    if (hasUnsavedChanges) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unsaved\",\n        children: \"Unsaved changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"saved\",\n      children: \"Saved\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 12\n    }, this);\n  };\n  if (!selectedProject) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-whiteboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whiteboard-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Project Whiteboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whiteboard-empty\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-state-icon\",\n            children: \"\\uD83D\\uDCDD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"No project selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a project to view and edit its whiteboard notes.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-whiteboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Project Whiteboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"project-name\",\n          children: selectedProject.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auto-save-status\",\n        children: getAutoSaveStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: whiteboardContent,\n        onChange: handleContentChange,\n        placeholder: \"Write your project notes here...  This is your project's whiteboard - a place for:\\n\\u2022 Project ideas and brainstorming\\n\\u2022 Meeting notes and decisions\\n\\u2022 To-do items and action plans\\n\\u2022 Important links and references\\n\\u2022 Anything else related to this project Your notes will be automatically saved as you type.\",\n        className: \"whiteboard-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectWhiteboard, \"IiW1NMcQbNTkz9QBwk346OljJsk=\");\n_c = ProjectWhiteboard;\nexport default ProjectWhiteboard;\nvar _c;\n$RefreshReg$(_c, \"ProjectWhiteboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","jsxDEV","_jsxDEV","ProjectWhiteboard","selectedProject","onError","onSuccess","_s","whiteboardContent","setWhiteboardContent","autoSaving","setAutoSaving","hasUnsavedChanges","setHasUnsavedChanges","isTyping","setIsTyping","lastSavedContent","setLastSavedContent","autoSaveTimeoutRef","syncTimeoutRef","typingTimeoutRef","whiteboard","current","clearTimeout","triggerAutoSave","content","put","id","error","console","_error$response","_error$response$data","response","data","detail","message","checkForUpdates","get","serverContent","handleContentChange","e","newContent","target","value","setTimeout","setupSyncInterval","getAutoSaveStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/soshhowell/Apps/inkwell-internal/frontend/src/components/ProjectWhiteboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport './ProjectWhiteboard.css';\n\nconst ProjectWhiteboard = ({ selectedProject, onError, onSuccess }) => {\n  const [whiteboardContent, setWhiteboardContent] = useState('');\n  const [autoSaving, setAutoSaving] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [lastSavedContent, setLastSavedContent] = useState('');\n  \n  const autoSaveTimeoutRef = useRef(null);\n  const syncTimeoutRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Load whiteboard content when selected project changes\n  useEffect(() => {\n    if (selectedProject) {\n      setWhiteboardContent(selectedProject.whiteboard || '');\n      setLastSavedContent(selectedProject.whiteboard || '');\n      setHasUnsavedChanges(false);\n    } else {\n      setWhiteboardContent('');\n      setLastSavedContent('');\n      setHasUnsavedChanges(false);\n    }\n\n    // Clear timeouts when project changes\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n      autoSaveTimeoutRef.current = null;\n    }\n    if (syncTimeoutRef.current) {\n      clearTimeout(syncTimeoutRef.current);\n      syncTimeoutRef.current = null;\n    }\n  }, [selectedProject]);\n\n  // Auto-save function\n  const triggerAutoSave = useCallback(async (content) => {\n    if (!selectedProject || content === lastSavedContent) return;\n    \n    setAutoSaving(true);\n    try {\n      await axios.put(`/api/projects/${selectedProject.id}/whiteboard`, {\n        whiteboard: content\n      });\n      setLastSavedContent(content);\n      setHasUnsavedChanges(false);\n      if (onSuccess) {\n        onSuccess('Whiteboard saved');\n      }\n    } catch (error) {\n      console.error('Failed to save whiteboard:', error);\n      if (onError) {\n        onError('Failed to save whiteboard: ' + (error.response?.data?.detail || error.message));\n      }\n    } finally {\n      setAutoSaving(false);\n    }\n  }, [selectedProject, lastSavedContent, onError, onSuccess]);\n\n  // Sync check function (polls for updates from other windows)\n  const checkForUpdates = useCallback(async () => {\n    if (!selectedProject || isTyping) return;\n\n    try {\n      const response = await axios.get(`/api/projects/${selectedProject.id}`);\n      const serverContent = response.data.whiteboard || '';\n      \n      // Only update if content has changed and user hasn't made local changes\n      if (serverContent !== lastSavedContent && !hasUnsavedChanges) {\n        setWhiteboardContent(serverContent);\n        setLastSavedContent(serverContent);\n      }\n    } catch (error) {\n      console.error('Failed to sync whiteboard:', error);\n    }\n  }, [selectedProject, isTyping, hasUnsavedChanges, lastSavedContent]);\n\n  // Handle content change\n  const handleContentChange = (e) => {\n    const newContent = e.target.value;\n    setWhiteboardContent(newContent);\n    setHasUnsavedChanges(newContent !== lastSavedContent);\n    setIsTyping(true);\n\n    // Clear existing timeouts\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n    }\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Set typing to false after 1 second of inactivity\n    typingTimeoutRef.current = setTimeout(() => {\n      setIsTyping(false);\n    }, 1000);\n\n    // Auto-save after 2 seconds of inactivity\n    autoSaveTimeoutRef.current = setTimeout(() => {\n      triggerAutoSave(newContent);\n    }, 2000);\n  };\n\n  // Set up periodic sync check\n  useEffect(() => {\n    if (!selectedProject) return;\n\n    const setupSyncInterval = () => {\n      syncTimeoutRef.current = setTimeout(() => {\n        checkForUpdates();\n        setupSyncInterval(); // Schedule next check\n      }, 5000); // Check every 5 seconds\n    };\n\n    setupSyncInterval();\n\n    return () => {\n      if (syncTimeoutRef.current) {\n        clearTimeout(syncTimeoutRef.current);\n      }\n    };\n  }, [selectedProject, checkForUpdates]);\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimeoutRef.current) {\n        clearTimeout(autoSaveTimeoutRef.current);\n      }\n      if (syncTimeoutRef.current) {\n        clearTimeout(syncTimeoutRef.current);\n      }\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Get auto-save status text\n  const getAutoSaveStatus = () => {\n    if (autoSaving) {\n      return <span className=\"auto-saving\">Saving...</span>;\n    }\n    if (hasUnsavedChanges) {\n      return <span className=\"unsaved\">Unsaved changes</span>;\n    }\n    return <span className=\"saved\">Saved</span>;\n  };\n\n  if (!selectedProject) {\n    return (\n      <div className=\"project-whiteboard\">\n        <div className=\"whiteboard-header\">\n          <h3>Project Whiteboard</h3>\n        </div>\n        <div className=\"whiteboard-empty\">\n          <div className=\"empty-state\">\n            <div className=\"empty-state-icon\">📝</div>\n            <h4>No project selected</h4>\n            <p>Select a project to view and edit its whiteboard notes.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"project-whiteboard\">\n      <div className=\"whiteboard-header\">\n        <div>\n          <h3>Project Whiteboard</h3>\n          <span className=\"project-name\">{selectedProject.name}</span>\n        </div>\n        <div className=\"auto-save-status\">\n          {getAutoSaveStatus()}\n        </div>\n      </div>\n      <div className=\"whiteboard-content\">\n        <textarea\n          value={whiteboardContent}\n          onChange={handleContentChange}\n          placeholder=\"Write your project notes here... \n\nThis is your project's whiteboard - a place for:\n• Project ideas and brainstorming\n• Meeting notes and decisions\n• To-do items and action plans\n• Important links and references\n• Anything else related to this project\n\nYour notes will be automatically saved as you type.\"\n          className=\"whiteboard-textarea\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectWhiteboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}