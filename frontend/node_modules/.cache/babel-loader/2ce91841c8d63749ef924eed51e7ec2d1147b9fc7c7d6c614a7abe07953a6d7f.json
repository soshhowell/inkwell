{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import axios from'axios';import'./ProjectWhiteboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProjectWhiteboard=_ref=>{let{selectedProject,onError,onSuccess}=_ref;const[whiteboardContent,setWhiteboardContent]=useState('');const[autoSaving,setAutoSaving]=useState(false);const[hasUnsavedChanges,setHasUnsavedChanges]=useState(false);const[isTyping,setIsTyping]=useState(false);const[lastSavedContent,setLastSavedContent]=useState('');const autoSaveTimeoutRef=useRef(null);const syncTimeoutRef=useRef(null);const typingTimeoutRef=useRef(null);// Load whiteboard content when selected project changes\nuseEffect(()=>{if(selectedProject){setWhiteboardContent(selectedProject.whiteboard||'');setLastSavedContent(selectedProject.whiteboard||'');setHasUnsavedChanges(false);}else{setWhiteboardContent('');setLastSavedContent('');setHasUnsavedChanges(false);}// Clear timeouts when project changes\nif(autoSaveTimeoutRef.current){clearTimeout(autoSaveTimeoutRef.current);autoSaveTimeoutRef.current=null;}if(syncTimeoutRef.current){clearTimeout(syncTimeoutRef.current);syncTimeoutRef.current=null;}},[selectedProject]);// Auto-save function\nconst triggerAutoSave=useCallback(async content=>{if(!selectedProject||content===lastSavedContent)return;setAutoSaving(true);try{await axios.put(\"/api/projects/\".concat(selectedProject.id,\"/whiteboard\"),{whiteboard:content});setLastSavedContent(content);setHasUnsavedChanges(false);if(onSuccess){onSuccess('Whiteboard saved');}}catch(error){console.error('Failed to save whiteboard:',error);if(onError){var _error$response,_error$response$data;onError('Failed to save whiteboard: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||error.message));}}finally{setAutoSaving(false);}},[selectedProject,lastSavedContent,onError,onSuccess]);// Sync check function (polls for updates from other windows)\nconst checkForUpdates=useCallback(async()=>{if(!selectedProject||isTyping)return;try{const response=await axios.get(\"/api/projects/\".concat(selectedProject.id));const serverContent=response.data.whiteboard||'';// Only update if content has changed and user hasn't made local changes\nif(serverContent!==lastSavedContent&&!hasUnsavedChanges){setWhiteboardContent(serverContent);setLastSavedContent(serverContent);}}catch(error){console.error('Failed to sync whiteboard:',error);}},[selectedProject,isTyping,hasUnsavedChanges,lastSavedContent]);// Handle content change\nconst handleContentChange=e=>{const newContent=e.target.value;setWhiteboardContent(newContent);setHasUnsavedChanges(newContent!==lastSavedContent);setIsTyping(true);// Clear existing timeouts\nif(autoSaveTimeoutRef.current){clearTimeout(autoSaveTimeoutRef.current);}if(typingTimeoutRef.current){clearTimeout(typingTimeoutRef.current);}// Set typing to false after 1 second of inactivity\ntypingTimeoutRef.current=setTimeout(()=>{setIsTyping(false);},1000);// Auto-save after 2 seconds of inactivity\nautoSaveTimeoutRef.current=setTimeout(()=>{triggerAutoSave(newContent);},2000);};// Set up periodic sync check\nuseEffect(()=>{if(!selectedProject)return;const setupSyncInterval=()=>{syncTimeoutRef.current=setTimeout(()=>{checkForUpdates();setupSyncInterval();// Schedule next check\n},5000);// Check every 5 seconds\n};setupSyncInterval();return()=>{if(syncTimeoutRef.current){clearTimeout(syncTimeoutRef.current);}};},[selectedProject,checkForUpdates]);// Cleanup timeouts on unmount\nuseEffect(()=>{return()=>{if(autoSaveTimeoutRef.current){clearTimeout(autoSaveTimeoutRef.current);}if(syncTimeoutRef.current){clearTimeout(syncTimeoutRef.current);}if(typingTimeoutRef.current){clearTimeout(typingTimeoutRef.current);}};},[]);// Get auto-save status text\nconst getAutoSaveStatus=()=>{if(autoSaving){return/*#__PURE__*/_jsx(\"span\",{className:\"auto-saving\",children:\"Saving...\"});}if(hasUnsavedChanges){return/*#__PURE__*/_jsx(\"span\",{className:\"unsaved\",children:\"Unsaved changes\"});}return/*#__PURE__*/_jsx(\"span\",{className:\"saved\",children:\"Saved\"});};if(!selectedProject){return/*#__PURE__*/_jsxs(\"div\",{className:\"project-whiteboard\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"whiteboard-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Project Whiteboard\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"whiteboard-empty\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-state-icon\",children:\"\\uD83D\\uDCDD\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"No project selected\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Select a project to view and edit its whiteboard notes.\"})]})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"project-whiteboard\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"whiteboard-header\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Project Whiteboard\"}),/*#__PURE__*/_jsx(\"span\",{className:\"project-name\",children:selectedProject.name})]}),/*#__PURE__*/_jsx(\"div\",{className:\"auto-save-status\",children:getAutoSaveStatus()})]}),/*#__PURE__*/_jsx(\"div\",{className:\"whiteboard-content\",children:/*#__PURE__*/_jsx(\"textarea\",{value:whiteboardContent,onChange:handleContentChange,placeholder:\"Write your project notes here...  This is your project's whiteboard - a place for:\\n\\u2022 Project ideas and brainstorming\\n\\u2022 Meeting notes and decisions\\n\\u2022 To-do items and action plans\\n\\u2022 Important links and references\\n\\u2022 Anything else related to this project Your notes will be automatically saved as you type.\",className:\"whiteboard-textarea\"})})]});};export default ProjectWhiteboard;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","jsx","_jsx","jsxs","_jsxs","ProjectWhiteboard","_ref","selectedProject","onError","onSuccess","whiteboardContent","setWhiteboardContent","autoSaving","setAutoSaving","hasUnsavedChanges","setHasUnsavedChanges","isTyping","setIsTyping","lastSavedContent","setLastSavedContent","autoSaveTimeoutRef","syncTimeoutRef","typingTimeoutRef","whiteboard","current","clearTimeout","triggerAutoSave","content","put","concat","id","error","console","_error$response","_error$response$data","response","data","detail","message","checkForUpdates","get","serverContent","handleContentChange","e","newContent","target","value","setTimeout","setupSyncInterval","getAutoSaveStatus","className","children","name","onChange","placeholder"],"sources":["/Users/soshhowell/Apps/inkwell-internal/frontend/src/components/ProjectWhiteboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport './ProjectWhiteboard.css';\n\nconst ProjectWhiteboard = ({ selectedProject, onError, onSuccess }) => {\n  const [whiteboardContent, setWhiteboardContent] = useState('');\n  const [autoSaving, setAutoSaving] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [lastSavedContent, setLastSavedContent] = useState('');\n  \n  const autoSaveTimeoutRef = useRef(null);\n  const syncTimeoutRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Load whiteboard content when selected project changes\n  useEffect(() => {\n    if (selectedProject) {\n      setWhiteboardContent(selectedProject.whiteboard || '');\n      setLastSavedContent(selectedProject.whiteboard || '');\n      setHasUnsavedChanges(false);\n    } else {\n      setWhiteboardContent('');\n      setLastSavedContent('');\n      setHasUnsavedChanges(false);\n    }\n\n    // Clear timeouts when project changes\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n      autoSaveTimeoutRef.current = null;\n    }\n    if (syncTimeoutRef.current) {\n      clearTimeout(syncTimeoutRef.current);\n      syncTimeoutRef.current = null;\n    }\n  }, [selectedProject]);\n\n  // Auto-save function\n  const triggerAutoSave = useCallback(async (content) => {\n    if (!selectedProject || content === lastSavedContent) return;\n    \n    setAutoSaving(true);\n    try {\n      await axios.put(`/api/projects/${selectedProject.id}/whiteboard`, {\n        whiteboard: content\n      });\n      setLastSavedContent(content);\n      setHasUnsavedChanges(false);\n      if (onSuccess) {\n        onSuccess('Whiteboard saved');\n      }\n    } catch (error) {\n      console.error('Failed to save whiteboard:', error);\n      if (onError) {\n        onError('Failed to save whiteboard: ' + (error.response?.data?.detail || error.message));\n      }\n    } finally {\n      setAutoSaving(false);\n    }\n  }, [selectedProject, lastSavedContent, onError, onSuccess]);\n\n  // Sync check function (polls for updates from other windows)\n  const checkForUpdates = useCallback(async () => {\n    if (!selectedProject || isTyping) return;\n\n    try {\n      const response = await axios.get(`/api/projects/${selectedProject.id}`);\n      const serverContent = response.data.whiteboard || '';\n      \n      // Only update if content has changed and user hasn't made local changes\n      if (serverContent !== lastSavedContent && !hasUnsavedChanges) {\n        setWhiteboardContent(serverContent);\n        setLastSavedContent(serverContent);\n      }\n    } catch (error) {\n      console.error('Failed to sync whiteboard:', error);\n    }\n  }, [selectedProject, isTyping, hasUnsavedChanges, lastSavedContent]);\n\n  // Handle content change\n  const handleContentChange = (e) => {\n    const newContent = e.target.value;\n    setWhiteboardContent(newContent);\n    setHasUnsavedChanges(newContent !== lastSavedContent);\n    setIsTyping(true);\n\n    // Clear existing timeouts\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n    }\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Set typing to false after 1 second of inactivity\n    typingTimeoutRef.current = setTimeout(() => {\n      setIsTyping(false);\n    }, 1000);\n\n    // Auto-save after 2 seconds of inactivity\n    autoSaveTimeoutRef.current = setTimeout(() => {\n      triggerAutoSave(newContent);\n    }, 2000);\n  };\n\n  // Set up periodic sync check\n  useEffect(() => {\n    if (!selectedProject) return;\n\n    const setupSyncInterval = () => {\n      syncTimeoutRef.current = setTimeout(() => {\n        checkForUpdates();\n        setupSyncInterval(); // Schedule next check\n      }, 5000); // Check every 5 seconds\n    };\n\n    setupSyncInterval();\n\n    return () => {\n      if (syncTimeoutRef.current) {\n        clearTimeout(syncTimeoutRef.current);\n      }\n    };\n  }, [selectedProject, checkForUpdates]);\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimeoutRef.current) {\n        clearTimeout(autoSaveTimeoutRef.current);\n      }\n      if (syncTimeoutRef.current) {\n        clearTimeout(syncTimeoutRef.current);\n      }\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Get auto-save status text\n  const getAutoSaveStatus = () => {\n    if (autoSaving) {\n      return <span className=\"auto-saving\">Saving...</span>;\n    }\n    if (hasUnsavedChanges) {\n      return <span className=\"unsaved\">Unsaved changes</span>;\n    }\n    return <span className=\"saved\">Saved</span>;\n  };\n\n  if (!selectedProject) {\n    return (\n      <div className=\"project-whiteboard\">\n        <div className=\"whiteboard-header\">\n          <h3>Project Whiteboard</h3>\n        </div>\n        <div className=\"whiteboard-empty\">\n          <div className=\"empty-state\">\n            <div className=\"empty-state-icon\">📝</div>\n            <h4>No project selected</h4>\n            <p>Select a project to view and edit its whiteboard notes.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"project-whiteboard\">\n      <div className=\"whiteboard-header\">\n        <div>\n          <h3>Project Whiteboard</h3>\n          <span className=\"project-name\">{selectedProject.name}</span>\n        </div>\n        <div className=\"auto-save-status\">\n          {getAutoSaveStatus()}\n        </div>\n      </div>\n      <div className=\"whiteboard-content\">\n        <textarea\n          value={whiteboardContent}\n          onChange={handleContentChange}\n          placeholder=\"Write your project notes here... \n\nThis is your project's whiteboard - a place for:\n• Project ideas and brainstorming\n• Meeting notes and decisions\n• To-do items and action plans\n• Important links and references\n• Anything else related to this project\n\nYour notes will be automatically saved as you type.\"\n          className=\"whiteboard-textarea\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectWhiteboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}